apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/ralphbean/python-app?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/pull_request_number: '{{pull_request_number}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-cel-expression: event == "pull_request" && target_branch == "main" && ( "./***".pathChanged() || ".tekton/python-app-pull-request.yaml".pathChanged() || "docker/Dockerfile".pathChanged() )
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: python-app
    appstudio.openshift.io/component: python-app
    pipelines.appstudio.openshift.io/type: build
  name: python-app-on-pull-request
  namespace: ralphjbean-tenant
spec:
  params:
    - name: dockerfile
      value: docker/Dockerfile
    - name: git-url
      value: '{{repo_url}}'
    - name: image-expires-after
      value: 5d
    - name: output-image
      value: quay.io/redhat-user-workloads/ralphjbean-tenant/python-app/python-app:on-pr-{{revision}}
    - name: path-context
      value: .
    - name: revision
      value: '{{revision}}'
    - name: build-source-image
      value: 'true'
  pipelineSpec:
    finally:
      - name: show-sbom
        params:
          - name: IMAGE_URL
            value: $(tasks.build-container.results.IMAGE_URL)
        taskRef:
          params:
            - name: name
              value: show-sbom
            - name: bundle
              value: quay.io/redhat-appstudio-tekton-catalog/task-show-sbom:0.1@sha256:82737c8d365c620295fa526d21a481d4614f657800175ddc0ccd7846c54207f8
            - name: kind
              value: task
          resolver: bundles
      - name: show-summary
        params:
          - name: pipelinerun-name
            value: $(context.pipelineRun.name)
          - name: git-url
            value: $(tasks.clone-repository.results.url)?rev=$(tasks.clone-repository.results.commit)
          - name: image-url
            value: $(params.output-image)
          - name: build-task-status
            value: $(tasks.build-container.status)
        taskRef:
          params:
            - name: name
              value: summary
            - name: bundle
              value: quay.io/redhat-appstudio-tekton-catalog/task-summary:0.2@sha256:535fd85afc42c856364653177edeb05cad9f6b9fa51cc893b7a29b099a6c8555
            - name: kind
              value: task
          resolver: bundles
    params:
      - description: Source Repository URL
        name: git-url
        type: string
      - default: ""
        description: Revision of the Source Repository
        name: revision
        type: string
      - description: Fully Qualified Output Image
        name: output-image
        type: string
      - default: .
        description: Path to the source code of an application's component from where to build image.
        name: path-context
        type: string
      - default: Dockerfile
        description: Path to the Dockerfile inside the context specified by parameter path-context
        name: dockerfile
        type: string
      - default: "false"
        description: Force rebuild image
        name: rebuild
        type: string
      - default: "false"
        description: Skip checks against built image
        name: skip-checks
        type: string
      - default: "true"
        description: Skip optional checks, set false if you want to run optional checks
        name: skip-optional
        type: string
      - default: "true"
        description: Execute the build with network isolation
        name: hermetic
        type: string
      - default: "pip"
        description: Build dependencies to be prefetched by Cachi2
        name: prefetch-input
        type: string
      - default: "false"
        description: Java build
        name: java
        type: string
      - default: ""
        description: Image tag expiration time, time values could be something like 1h, 2d, 3w for hours, days, and weeks, respectively.
        name: image-expires-after
      - default: "true"
        description: Build a source image.
        name: build-source-image
        type: string
    results:
      - description: ""
        name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - description: ""
        name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - description: ""
        name: CHAINS-GIT_URL
        value: $(tasks.clone-repository.results.url)
      - description: ""
        name: CHAINS-GIT_COMMIT
        value: $(tasks.clone-repository.results.commit)
      - description: ""
        name: JAVA_COMMUNITY_DEPENDENCIES
        value: $(tasks.build-container.results.JAVA_COMMUNITY_DEPENDENCIES)
    tasks:
      - name: init
        params:
          - name: image-url
            value: $(params.output-image)
          - name: rebuild
            value: $(params.rebuild)
          - name: skip-checks
            value: $(params.skip-checks)
          - name: skip-optional
            value: $(params.skip-optional)
          - name: pipelinerun-name
            value: $(context.pipelineRun.name)
          - name: pipelinerun-uid
            value: $(context.pipelineRun.uid)
        taskRef:
          params:
            - name: name
              value: init
            - name: bundle
              value: quay.io/redhat-appstudio-tekton-catalog/task-init:0.2@sha256:3d8f01fa59596a998d30dc700fcf7377f09d60008337290eebaeaf604512ce2b
            - name: kind
              value: task
          resolver: bundles
      - name: clone-repository
        params:
          - name: url
            value: $(params.git-url)
          - name: revision
            value: $(params.revision)
        runAfter:
          - init
        taskRef:
          params:
            - name: name
              value: git-clone
            - name: bundle
              value: quay.io/redhat-appstudio-tekton-catalog/task-git-clone:0.1@sha256:fffe6234a4d60c63b97af86642369e4931a404f6dc8be0d12743f7651a4dc802
            - name: kind
              value: task
          resolver: bundles
        when:
          - input: $(tasks.init.results.build)
            operator: in
            values:
              - "true"
        workspaces:
          - name: output
            workspace: workspace
          - name: basic-auth
            workspace: git-auth
      - name: prefetch-dependencies
        params:
          - name: input
            value: $(params.prefetch-input)
        runAfter:
          - clone-repository
        taskRef:
          params:
            - name: name
              value: prefetch-dependencies
            - name: bundle
              value: quay.io/redhat-appstudio-tekton-catalog/task-prefetch-dependencies:0.1@sha256:e29adab9f66415b3be2e89e154c03ec685900fdad90051a555d7d027f94f874e
            - name: kind
              value: task
          resolver: bundles
        when:
          - input: $(params.hermetic)
            operator: in
            values:
              - "true"
        workspaces:
          - name: source
            workspace: workspace
      - name: build-container
        params:
          - name: IMAGE
            value: $(params.output-image)
          - name: DOCKERFILE
            value: $(params.dockerfile)
          - name: CONTEXT
            value: $(params.path-context)
          - name: HERMETIC
            value: $(params.hermetic)
          - name: PREFETCH_INPUT
            value: $(params.prefetch-input)
          - name: IMAGE_EXPIRES_AFTER
            value: $(params.image-expires-after)
          - name: COMMIT_SHA
            value: $(tasks.clone-repository.results.commit)
        runAfter:
          - prefetch-dependencies
        taskRef:
          params:
            - name: name
              value: buildah
            - name: bundle
              value: quay.io/redhat-appstudio-tekton-catalog/task-buildah:0.1@sha256:e1e6c6308b8c7d5aa2faa02129af7fcc9e8dc4bbfe741c1acab5c9edca28fb77
            - name: kind
              value: task
          resolver: bundles
        when:
          - input: $(tasks.init.results.build)
            operator: in
            values:
              - "true"
        workspaces:
          - name: source
            workspace: workspace
      - name: build-source-image
        params:
          - name: BINARY_IMAGE
            value: $(params.output-image)
          - name: BASE_IMAGES
            value: $(tasks.build-container.results.BASE_IMAGES_DIGESTS)
        runAfter:
          - build-container
        taskRef:
          params:
            - name: name
              value: source-build
            - name: bundle
              value: quay.io/redhat-appstudio-tekton-catalog/task-source-build:0.1@sha256:dce619d12de143d9f2b84b6293027cd053580552219f3c632d91acd901ab294b
            - name: kind
              value: task
          resolver: bundles
        when:
          - input: $(tasks.init.results.build)
            operator: in
            values:
              - "true"
          - input: $(params.build-source-image)
            operator: in
            values:
              - "true"
        workspaces:
          - name: workspace
            workspace: workspace
      - name: inspect-image
        params:
          - name: IMAGE_URL
            value: $(tasks.build-container.results.IMAGE_URL)
          - name: IMAGE_DIGEST
            value: $(tasks.build-container.results.IMAGE_DIGEST)
        runAfter:
          - build-container
        taskRef:
          params:
            - name: name
              value: inspect-image
            - name: bundle
              value: quay.io/redhat-appstudio-tekton-catalog/task-inspect-image:0.1@sha256:c9e991c0480f331f1eb49ade78c3510d4ae7cba2ec302dc39568d99dcddb62f8
            - name: kind
              value: task
          resolver: bundles
        when:
          - input: $(params.skip-checks)
            operator: in
            values:
              - "false"
        workspaces:
          - name: source
            workspace: workspace
      - name: deprecated-base-image-check
        params:
          - name: BASE_IMAGES_DIGESTS
            value: $(tasks.build-container.results.BASE_IMAGES_DIGESTS)
        runAfter:
          - build-container
        taskRef:
          params:
            - name: name
              value: deprecated-image-check
            - name: bundle
              value: quay.io/redhat-appstudio-tekton-catalog/task-deprecated-image-check:0.3@sha256:ba55ff56b8718406278d72fd5e3de88da110dd4391aa7581923b8d219a29f841
            - name: kind
              value: task
          resolver: bundles
        when:
          - input: $(params.skip-checks)
            operator: in
            values:
              - "false"
      - name: clair-scan
        params:
          - name: image-digest
            value: $(tasks.build-container.results.IMAGE_DIGEST)
          - name: image-url
            value: $(tasks.build-container.results.IMAGE_URL)
        runAfter:
          - build-container
        taskRef:
          params:
            - name: name
              value: clair-scan
            - name: bundle
              value: quay.io/redhat-appstudio-tekton-catalog/task-clair-scan:0.1@sha256:5097b69c7b8ed19bbc09b3b119214305ed382a185aece344806875e6c43203b8
            - name: kind
              value: task
          resolver: bundles
        when:
          - input: $(params.skip-checks)
            operator: in
            values:
              - "false"
      - name: sast-snyk-check
        runAfter:
          - clone-repository
          - build-container
        params:
          - name: image-digest
            value: $(tasks.build-container.results.IMAGE_DIGEST)
          - name: image-url
            value: $(tasks.build-container.results.IMAGE_URL)
        when:
          - input: $(params.skip-checks)
            operator: in
            values:
              - "false"
        workspaces:
          - name: workspace
            workspace: workspace
        taskSpec:
          apiVersion: tekton.dev/v1
          kind: Task
          metadata:
            annotations:
              tekton.dev/pipelines.minVersion: 0.12.1
              tekton.dev/tags: appstudio, hacbs
            labels:
              app.kubernetes.io/version: "0.1"
            name: sast-snyk-check
          spec:
            description: Scans source code for security vulnerabilities, including common issues such as SQL injection, cross-site scripting (XSS), and code injection attacks using Snyk Code, a Static Application Security Testing (SAST) tool.
            params:
              - description: Image digest to scan.
                name: image-digest
              - description: Image URL.
                name: image-url
              - default: snyk-secret
                description: Name of secret which contains Snyk token.
                name: SNYK_SECRET
              - default: --all-projects --exclude=test*,vendor,deps
                description: Append arguments.
                name: ARGS
                type: string
            results:
              - description: Tekton task test output.
                name: TEST_OUTPUT
            steps:
              - env:
                  - name: SNYK_SECRET
                    value: $(params.SNYK_SECRET)
                  - name: ARGS
                    value: $(params.ARGS)
                  - name: IMAGE_URL
                    value: $(params.image-url)
                  - name: IMAGE_DIGEST
                    value: $(params.image-digest)
                image: quay.io/redhat-appstudio/hacbs-test:v1.3.0@sha256:cd4601a7d71ebd908046db7a9b7010611b8b372fe941664d5163c81250a1a1fc
                name: sast-snyk-check
                script: |
                  #!/usr/bin/env bash
                  set -euo pipefail
                  . /utils.sh
                  trap 'handle_error $(results.TEST_OUTPUT.path)' EXIT

                  imagewithouttag=$(echo $IMAGE_URL | sed "s/\\(.*\\):.*/\\1/" | tr -d '\
                  ')

                  # strip new-line escape symbol from parameter and save it to variable
                  imageanddigest=$(echo $imagewithouttag@$IMAGE_DIGEST)

                  echo $imageanddigest
                  exit 2

                  SNYK_TOKEN_PATH="/etc/secrets/snyk_token"

                  if [ -f "${SNYK_TOKEN_PATH}" ] \u0026\u0026 [ -s "${SNYK_TOKEN_PATH}" ]; then
                    # SNYK token is provided
                    SNYK_TOKEN="$(cat ${SNYK_TOKEN_PATH})"
                    export SNYK_TOKEN
                  else
                    to_enable_snyk='[here](https://redhat-appstudio.github.io/docs.appstudio.io/Documentation/main/how-to-guides/testing_applications/enable_snyk_check_for_a_product/)'
                    note="Task $(context.task.name) skipped: If you wish to use the Snyk code SAST task, please create a secret name snyk-secret with the key "snyk_token" containing the Snyk token by following the steps given ${to_enable_snyk}"
                    TEST_OUTPUT=$(make_result_json -r SKIPPED -t "$note")
                    echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
                    exit 0
                  fi

                  SNYK_EXIT_CODE=0
                  SOURCE_CODE_DIR=$(workspaces.workspace.path)/source
                  snyk code test $ARGS $SOURCE_CODE_DIR --sarif-file-output=sast_snyk_check_out.json 1\u003e\u00262\u003e\u003e stdout.txt || SNYK_EXIT_CODE=$?
                  test_not_skipped=0
                  SKIP_MSG="We found 0 supported files"
                  grep -q "$SKIP_MSG" stdout.txt || test_not_skipped=$?

                  if [[ "$SNYK_EXIT_CODE" -eq 0 ]] || [[ "$SNYK_EXIT_CODE" -eq 1 ]]; then
                    cat sast_snyk_check_out.json
                    TEST_OUTPUT=
                    parse_test_output $(context.task.name) sarif sast_snyk_check_out.json  || true

                  # When the test is skipped, the "SNYK_EXIT_CODE" is 3 and it can also be 3 in some other situation
                  elif [[ "$test_not_skipped" -eq 0 ]]; then
                    note="Task $(context.task.name) success: Snyk code test found zero supported files."
                    ERROR_OUTPUT=$(make_result_json -r SUCCESS -t "$note")
                  else
                    echo "sast-snyk-check test failed because of the following issues:"
                    cat stdout.txt
                    note="Task $(context.task.name) failed: For details, check Tekton task log."
                    ERROR_OUTPUT=$(make_result_json -r ERROR -t "$note")
                  fi
                  echo "${TEST_OUTPUT:-${ERROR_OUTPUT}}" | tee $(results.TEST_OUTPUT.path)
                  echo testing...
                volumeMounts:
                  - mountPath: /etc/secrets
                    name: snyk-secret
                    readOnly: true
                workingDir: $(workspaces.workspace.path)/hacbs/$(context.task.name)
            volumes:
              - name: snyk-secret
                secret:
                  optional: true
                  secretName: $(params.SNYK_SECRET)
            workspaces:
              - name: workspace
      - name: clamav-scan
        params:
          - name: image-digest
            value: $(tasks.build-container.results.IMAGE_DIGEST)
          - name: image-url
            value: $(tasks.build-container.results.IMAGE_URL)
        runAfter:
          - build-container
        when:
          - input: $(params.skip-checks)
            operator: in
            values:
              - "false"
        taskSpec:
          apiVersion: tekton.dev/v1
          kind: Task
          metadata:
            annotations:
              tekton.dev/pipelines.minVersion: 0.12.1
              tekton.dev/tags: virus, appstudio, hacbs
            labels:
              app.kubernetes.io/version: "0.1"
            name: clamav-scan
          spec:
            description: Scans the content of container images for viruses, malware, and other malicious content using ClamAV antivirus scanner.
            params:
              - description: Image digest to scan.
                name: image-digest
              - description: Image URL.
                name: image-url
              - default: ""
                description: unused
                name: docker-auth
            results:
              - description: Tekton task test output.
                name: TEST_OUTPUT
              - description: Images processed in the task.
                name: IMAGES_PROCESSED
            sidecars:
              - image: quay.io/redhat-appstudio/clamav-db:v1
                imagePullPolicy: Always
                name: database
                script: |
                  #!/usr/bin/env bash
                  clamscan --version
                  cp -r /var/lib/clamav/* /tmp/clamdb
                volumeMounts:
                  - mountPath: /tmp/clamdb
                    name: dbfolder
            steps:
              - computeResources:
                  limits:
                    memory: 4Gi
                  requests:
                    cpu: 10m
                    memory: 512Mi
                env:
                  - name: HOME
                    value: /work
                  - name: IMAGE_URL
                    value: $(params.image-url)
                  - name: IMAGE_DIGEST
                    value: $(params.image-digest)
                image: quay.io/redhat-appstudio/hacbs-test:v1.3.4@sha256:b909fe6111e04169742e23a5e515aa549aa8c09ce0348f4560ae83d3c174a15a
                name: extract-and-scan-image
                script: |
                  #!/usr/bin/env bash
                  set -euo pipefail
                  . /utils.sh
                  trap 'handle_error' EXIT

                  imagewithouttag=$(echo $IMAGE_URL | sed "s/\\(.*\\):.*/\\1/" | tr -d '\
                  ')

                  # strip new-line escape symbol from parameter and save it to variable
                  imageanddigest=$(echo $imagewithouttag@$IMAGE_DIGEST)

                  # check if image is attestation one, skip the clamav scan in such case
                  if [[ $imageanddigest == *.att ]]
                  then
                      echo "$imageanddigest is an attestation image. Skipping ClamAV scan."
                      exit 0
                  fi

                  images_processed_template='{"image": {"pullspec": "'"$IMAGE_URL"'", "digests": [%s]}}'
                  digests_processed=()
                  mkdir content
                  cd content
                  echo "Extracting image(s)."

                  # Get the arch and image manifests by inspecting the image. This is mainly for identifying image indexes
                  image_manifests=$(get_image_manifests -i ${imageanddigest})
                  if [ -n "$image_manifests" ]; then
                    while read -r arch arch_sha; do
                      destination=$(echo content-$arch)
                      mkdir -p "$destination"
                      arch_imageanddigest=$(echo $imagewithouttag@$arch_sha)

                      echo "Running \\"oc image extract\\" on image of arch $arch"
                      oc image extract --registry-config ~/.docker/config.json $arch_imageanddigest --path="/:${destination}" --filter-by-os="linux/${arch}"
                      if [ $? -ne 0 ]; then
                        echo "Unable to extract image for arch $arch. Skipping ClamAV scan!"
                        exit 0
                      fi

                      echo "Scanning image for arch $arch. This operation may take a while."
                      clamscan $destination -ri --max-scansize=4095M --max-filesize=4095M \\
                        --max-scantime=0 --max-files=0 --max-recursion=1000 --max-dir-recursion=20000 --max-embeddedpe=4095M \\
                        --max-htmlnormalize=10M --max-htmlnotags=4095M --max-scriptnormalize=5M --max-ziptypercg=4095M \\
                        --max-partitions=50000 --max-iconspe=100000 --max-rechwp3=20000 --pcre-match-limit=100000000 --pcre-recmatch-limit=2000000 \\
                        --pcre-max-filesize=4095M --alert-exceeds-max=yes \\
                        --alert-encrypted=yes --alert-encrypted-archive=yes --alert-encrypted-doc=yes --alert-macros=yes \\
                        --alert-phishing-ssl=yes --alert-phishing-cloak=yes --alert-partition-intersection=yes \\
                        | tee /tekton/home/clamscan-result-$arch.log || true
                      echo "Executed-on: Scan was executed on version - $(clamscan --version)" | tee -a /tekton/home/clamscan-result-$arch.log

                      digests_processed+=("\\"$arch_sha\\"")

                      if [[ -e "/tekton/home/clamscan-result-$arch.log" ]]; then
                        # file_suffix=$(basename "$file" | sed 's/clamscan-result-//;s/.log//')
                        # OPA/EC requires structured data input, add clamAV log into json
                        jq -Rs '{ output: . }' /tekton/home/clamscan-result-$arch.log \u003e /tekton/home/clamscan-result-log-$arch.json

                        EC_EXPERIMENTAL=1 ec test \\
                          --namespace required_checks \\
                          --policy /project/clamav/virus-check.rego \\
                          -o json \\
                          /tekton/home/clamscan-result-log-$arch.json || true

                        # workaround: due to a bug in ec-cli, we cannot generate json and appstudio output at the same time, running it again
                        EC_EXPERIMENTAL=1 ec test \\
                          --namespace required_checks \\
                          --policy /project/clamav/virus-check.rego \\
                          -o appstudio \\
                          /tekton/home/clamscan-result-log-$arch.json | tee /tekton/home/clamscan-ec-test-$arch.json || true

                        cat /tekton/home/clamscan-ec-test-$arch.json
                      fi
                    done \u003c \u003c(echo "$image_manifests" | jq -r 'to_entries[] | "\\(.key) \\(.value)"')
                  fi

                  jq -s -rce '
                    reduce .[] as $item ({"timestamp":"0","namespace":"","successes":0,"failures":0,"warnings":0,"result":"","note":""};
                      {
                      "timestamp" : (if .timestamp \u003c $item.timestamp then $item.timestamp else .timestamp end),
                      "namespace" : $item.namespace,
                      "successes" : (.successes + $item.successes),
                      "failures" : (.failures + $item.failures),
                      "warnings" : (.warnings + $item.warnings),
                      "result" : (if .result == "" or ($item.result == "SKIPPED" and .result == "SUCCESS") or ($item.result == "WARNING" and (.result == "SUCCESS" or .result == "SKIPPED")) or ($item.result == "FAILURE" and .result != "ERROR") or $item.result == "ERROR" then $item.result else .result end),
                      "note" : (if .result == "" or ($item.result == "SKIPPED" and .result == "SUCCESS") or ($item.result == "WARNING" and (.result == "SUCCESS" or .result == "SKIPPED")) or ($item.result == "FAILURE" and .result != "ERROR") or $item.result == "ERROR" then $item.note else .note end)
                      })' /tekton/home/clamscan-ec-test-*.json | tee $(results.TEST_OUTPUT.path)

                  digests_processed_string=$(IFS=,; echo "${digests_processed[*]}")
                  echo "${images_processed_template/\\[%s]/[$digests_processed_string]}" | tee $(results.IMAGES_PROCESSED.path)
                securityContext:
                  runAsUser: 1000
                volumeMounts:
                  - mountPath: /var/lib/clamav
                    name: dbfolder
                  - mountPath: /work
                    name: work
                workingDir: /work
            volumes:
              - emptydir: {}
                name: dbfolder
              - emptydir: {}
                name: work
      - name: sbom-json-check
        params:
          - name: IMAGE_URL
            value: $(tasks.build-container.results.IMAGE_URL)
          - name: IMAGE_DIGEST
            value: $(tasks.build-container.results.IMAGE_DIGEST)
        runAfter:
          - build-container
        taskRef:
          params:
            - name: name
              value: sbom-json-check
            - name: bundle
              value: quay.io/redhat-appstudio-tekton-catalog/task-sbom-json-check:0.1@sha256:e5202b2f610fcf36793e410336bd5b9764999abb29b3cd29007f6c68dd7725af
            - name: kind
              value: task
          resolver: bundles
        when:
          - input: $(params.skip-checks)
            operator: in
            values:
              - "false"
    workspaces:
      - name: workspace
      - name: git-auth
        optional: true
  workspaces:
    - name: workspace
      volumeClaimTemplate:
        metadata:
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
        status: {}
    - name: git-auth
      secret:
        secretName: '{{ git_auth_secret }}'
status: {}
